<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script type="importmap">
        {
            "imports": {
                "three": "/three/build/three.module.js",
                "three/addons/": "/three/examples/jsm/"
            }
        }
    </script>

    <script type="module">

        import * as THREE from 'three';

        import Stats from 'three/addons/libs/stats.module.js';

        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { FBXLoader } from 'three/addons/loaders/FBXLoader.js';
        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
        import { GUI } from 'three/addons/libs/lil-gui.module.min.js';

        const manager = new THREE.LoadingManager();

        let camera, scene, renderer, stats, object, loader, guiMorphsFolder;
        let mixer;

        const clock = new THREE.Clock();

        const params = {
            asset: 'scene (1)'
        };

        const assets = [
            'scene',
            'Samba Dancing',
            'morph_test'
        ];


        init();

        function init() {

            const container = document.createElement( 'div' );
            document.body.appendChild( container );

            camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
            camera.position.set( 100, 200, 300 );

            scene = new THREE.Scene();
            scene.background = new THREE.Color( 0xa0a0a0 );
            scene.fog = new THREE.Fog( 0xa0a0a0, 200, 1000 );

            const hemiLight = new THREE.HemisphereLight( 0xffffff, 0x444444, 5 );
            hemiLight.position.set( 0, 200, 0 );
            scene.add( hemiLight );

            const dirLight = new THREE.DirectionalLight( 0xffffff, 5 );
            dirLight.position.set( 0, 200, 100 );
            dirLight.castShadow = false;
            dirLight.shadow.camera.top = 180;
            dirLight.shadow.camera.bottom = - 100;
            dirLight.shadow.camera.left = - 120;
            dirLight.shadow.camera.right = 120;
            scene.add( dirLight );

            // scene.add( new THREE.CameraHelper( dirLight.shadow.camera ) );

            // ground
            const mesh = new THREE.Mesh( new THREE.PlaneGeometry( 2000, 2000 ), new THREE.MeshPhongMaterial( { color: 0x999999, depthWrite: false } ) );
            mesh.rotation.x = - Math.PI / 2;
            mesh.receiveShadow = true;
            scene.add( mesh );

            const grid = new THREE.GridHelper( 2000, 20, 0x000000, 0x000000 );
            grid.material.opacity = 0.2;
            grid.material.transparent = true;
            scene.add( grid );
        
            loader = new GLTFLoader( manager );
            loadAsset( params.asset );

            renderer = new THREE.WebGLRenderer( { antialias: true } );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );
            renderer.setAnimationLoop( animate );
            renderer.shadowMap.enabled = true;
            container.appendChild( renderer.domElement );

            const controls = new OrbitControls( camera, renderer.domElement );
            controls.target.set( 0, 100, 0 );
            controls.update();

            window.addEventListener( 'resize', onWindowResize );

            // stats
            stats = new Stats();
            container.appendChild( stats.dom );

            const gui = new GUI();
            gui.add( params, 'asset', assets ).onChange( function ( value ) {

                loadAsset( value );

            } );

            guiMorphsFolder = gui.addFolder( 'Morphs' ).hide();

        }

        function loadAsset( asset ) {
            loader.load( asset + '.gltf', async function ( gltf ) {

            const model = gltf.scene;

            // wait until the model can be added to the scene without blocking due to shader compilation

            await renderer.compileAsync( model, camera, scene );

            scene.add( model );

            render();

            });


        }

        function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize( window.innerWidth, window.innerHeight );

        }


        function render() {

            renderer.render( scene, camera );

        }

        const raycaster = new THREE.Raycaster();
        const pointer = new THREE.Vector2();
        // const camera = YOUR_CAMERA; // Replace with your camera
        // const scene = YOUR_SCENE; // Replace with your scene

        // On mouse click
        window.addEventListener('click', (event) => {
            // Update pointer coordinates
            pointer.x = (event.clientX / window.innerWidth) * 2 - 1;
            pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;

            // Cast a ray from the camera through the pointer
            raycaster.setFromCamera(pointer, camera);

            // Intersect with the scene
            const intersects = raycaster.intersectObjects(scene.children, true); // Use 'true' to check children
            for (let i = 0; i < intersects.length; i++){
                const clickedObject = intersects[i].object;
                if(clickedObject.name != ""){
                    console.log('Clicked object:', clickedObject.name, clickedObject);
                }
            }
        });

        //

        function animate() {

            const delta = clock.getDelta();

            if ( mixer ) mixer.update( delta );

            renderer.render( scene, camera );

            stats.update();

        }

    </script>
</body>
</html>